name: Release

on:
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 2024.12.11)'
        required: false
      force:
        description: 'Force release even if no changes'
        type: boolean
        default: false

concurrency:
  group: release-${{ github.ref_name }}

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  check-changes:
    name: Check for changes
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes since last release
        id: check
        run: |
          # Get the version to use
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="v${{ github.event.inputs.version }}"
          else
            VERSION="v$(date +%Y.%m.%d)"
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          
          # Check if this version already exists
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Version $VERSION already exists"
            echo "should-release=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous releases found, will create first release"
            echo "should-release=true" >> "$GITHUB_OUTPUT"
          else
            # Check if there are any commits since the last tag
            COMMITS_SINCE=$(git rev-list --count "$LATEST_TAG"..HEAD)
            
            if [ "$COMMITS_SINCE" -gt 0 ] || [ "${{ github.event.inputs.force }}" == "true" ]; then
              echo "Found $COMMITS_SINCE commits since $LATEST_TAG"
              echo "should-release=true" >> "$GITHUB_OUTPUT"
            else
              echo "No changes since $LATEST_TAG"
              echo "should-release=false" >> "$GITHUB_OUTPUT"
            fi
          fi

  build-binaries:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    needs: [check-changes]
    if: needs.check-changes.outputs.should-release == 'true'
    runs-on: ${{ matrix.runs-on }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: linux
            arch: amd64
            runs-on: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            runs-on: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: linux
            arch: armv7
            runs-on: ubuntu-latest
            goos: linux
            goarch: arm
            goarm: 7
          # macOS
          - os: darwin
            arch: amd64
            runs-on: macos-latest
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            runs-on: macos-latest
            goos: darwin
            goarch: arm64
          # Windows
          - os: windows
            arch: amd64
            runs-on: windows-latest
            goos: windows
            goarch: amd64
          - os: windows
            arch: arm64
            runs-on: windows-latest
            goos: windows
            goarch: arm64
    steps:
      - uses: actions/checkout@v4

      - uses: jdx/mise-action@v2

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
        run: |
          if [ "${{ matrix.os }}" = "windows" ]; then
            mise run build-release-windows
          else
            mise run build-release
          fi

      - name: Create archives
        run: |
          if [ "${{ matrix.os }}" = "windows" ]; then
            mise run package-windows
          else
            mise run package
          fi
        env:
          OS: ${{ matrix.os }}
          ARCH: ${{ matrix.arch }}

      - uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/notary-*.tar.gz
            dist/notary-*.tar.xz
            dist/notary-*.tar.zst
            dist/notary-*.zip
          if-no-files-found: error

  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
    needs: [check-changes, build-binaries]
    if: needs.check-changes.outputs.should-release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: jdx/mise-action@v2

      - name: Import GPG key
        if: secrets.NOTARY_GPG_KEY
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.NOTARY_GPG_KEY }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y minisign fd-find
          mkdir -p "$HOME/.local/bin"
          ln -s "$(which fdfind)" "$HOME/.local/bin/fd"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: binaries-*
          merge-multiple: true

      - name: Setup minisign key
        if: secrets.MINISIGN_KEY
        run: echo "${{ secrets.MINISIGN_KEY }}" > minisign.key

      - name: Use version from check
        id: version
        run: |
          VERSION="${{ needs.check-changes.outputs.version }}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Generate changelog
        run: |
          # Install git-cliff if not available
          if ! command -v git-cliff >/dev/null 2>&1; then
            echo "Installing git-cliff..."
            mise install cargo:git-cliff@latest
          fi
          
          # Get the previous tag for comparison
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Generating changelog from $PREVIOUS_TAG to HEAD..."
            git-cliff "$PREVIOUS_TAG"..HEAD --strip header -o CHANGELOG.md
          else
            echo "Generating changelog for all commits..."
            git-cliff --latest --strip header -o CHANGELOG.md
          fi
          
          # Add release header
          echo "## Release ${{ steps.version.outputs.version }}" > CHANGELOG_FINAL.md
          echo "" >> CHANGELOG_FINAL.md
          cat CHANGELOG.md >> CHANGELOG_FINAL.md
          mv CHANGELOG_FINAL.md CHANGELOG.md
          
          echo "Changelog generated:"
          cat CHANGELOG.md

      - name: Create release
        run: mise run release
        env:
          VERSION: ${{ steps.version.outputs.version }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
          MINISIGN_KEY: ${{ secrets.MINISIGN_KEY }}
          MINISIGN_PUB: ${{ secrets.MINISIGN_PUB }}

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a -m "Release ${{ steps.version.outputs.version }}" "${{ steps.version.outputs.version }}"
          git push origin "${{ steps.version.outputs.version }}"

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          fail_on_unmatched_files: false
          draft: false
          files: |
            releases/${{ steps.version.outputs.version }}/*
            releases/SHASUMS256.txt
            releases/SHASUMS256.asc
            releases/SHASUMS256.minisig
            releases/SHASUMS512.txt
            releases/SHASUMS512.asc
            releases/SHASUMS512.minisig
          body_path: CHANGELOG.md
          generate_release_notes: false
          token: ${{ secrets.GITHUB_TOKEN }}